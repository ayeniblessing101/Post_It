{"version":3,"sources":["webpack:///./app/client/components/messages/MessageForm.jsx?c5ed"],"names":["MessageForm","props","state","messages","Messages","group","groupId","groupName","message","priority","handleSubmit","bind","handleChange","event","setState","target","name","value","preventDefault","message_body","priority_level","postMessage","then","getGroupWithMessages","$","document","ready","material_select","nextProps","allMessages","length","map","id","User","username","createdAt","ISO_8601","fromNow","handleMessageStatus","toLowerCase","Component","propTypes","func","isRequired","number","array","mapStateToProps","groups","allGroups"],"mappings":"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","file":"0.ce19fe9dba6a461caa44.hot-update.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { getGroupWithMessages, postMessage }\nfrom '../../actions/messageAction';\n\n/**\n * @class MessageForm\n * @extends {React.Component}\n */\nclass MessageForm extends React.Component {\n  /**\n   * Creates an instance of MessageForm.\n   * @param {any} props\n   * @memberof MessageForm\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: this.props.messages.Messages,\n      group: this.props.group,\n      groupId: this.props.groupId,\n      groupName: this.props.messages.groupName,\n      message: '',\n      priority: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * @param {any} event\n   * @memberof MessageForm\n   * @returns {void}\n   */\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  /**\n   * @param {any} event\n   * @memberof MessageForm\n   * @return {void}\n   */\n  handleSubmit(event) {\n    event.preventDefault();\n    const message = {\n      message_body: this.state.message,\n      priority_level: this.state.priority\n    };\n    this.props.postMessage(this.state.groupId, message)\n    .then(() => {\n      this.setState({\n        message: '',\n        priority: ''\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.props.getGroupWithMessages(this.props.groupId);\n    $(document).ready(() => {\n      $('select').material_select();\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      messages: nextProps.messages.Messages,\n      group: nextProps.group,\n      groupId: nextProps.groupId,\n      groupName: nextProps.messages.groupName\n    });\n  }\n  render() {\n    let allMessages;\n    // const { group } = this.state;\n    const { messages, groupName } = this.state;\n    if (messages.length > 0) {\n      allMessages = messages && messages.map(message => (\n        <div key={message.id}>\n          <b className=\"senderName\">\n            {message.User.username}\n          </b>\n          <span className=\"right\">\n            { moment(message.createdAt, moment.ISO_8601).fromNow() }\n          </span>\n          <p key={message.id}>\n            <Link\n              id={message.id}\n              className=\"messageLink\"\n              to=\"#\"\n              onClick={this.handleMessageStatus}>\n              {message.message_body}\n            </Link>\n            <span\n            className={`new badge ${(message.priority_level).toLowerCase()}`}\n            data-badge-caption={message.priority_level} />\n          </p>\n          <hr /><br />\n        </div>));\n    } else {\n      allMessages = (\n        <h6>No messages to show</h6>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"col s12 m12 l6 message-cards\">\n          <div className=\"message-cards-board\">\n            <h5 className=\"groupName\">{groupName}</h5>\n            { allMessages }\n          </div>\n          <div className=\"message-cards-form\">\n            <form onSubmit={this.handleSubmit} method=\"post\">\n              <div className=\"input-field col s8\">\n                <textarea\n                  placeholder=\"Write your message Here\"\n                  id=\"message\"\n                  type=\"text\"\n                  required\n                  name=\"message\"\n                  onChange={this.handleChange}\n                  value={this.state.message}\n                  className=\"materialize-textarea\"\n                />\n              </div>\n              <div className=\"col s4 mySelect\">\n                <select\n                  className=\"browser-default\"\n                  required\n                  value={this.state.priority}\n                  name=\"priority\"\n                  onChange={this.handleChange}>\n                  <option value=\"\" disabled>Select Priority</option>\n                  <option value=\"Normal\">Normal</option>\n                  <option value=\"Critical\">Critical</option>\n                  <option value=\"Urgent\">Urgent</option>\n                </select>\n                <br />\n                <button className=\"btn messageBtn\" type=\"submit\">\n                  <i className=\"material-icons\">send</i>\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMessageForm.propTypes = {\n  postMessage: PropTypes.func.isRequired,\n  getGroupWithMessages: PropTypes.func.isRequired,\n  groupId: PropTypes.number.isRequired,\n  messages: PropTypes.array.isRequired,\n  group: PropTypes.array.isRequired,\n};\n\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n  group: state.groups.allGroups\n});\n\nexport default\nconnect(mapStateToProps,\n  { getGroupWithMessages, postMessage })(MessageForm);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/messages/MessageForm.jsx"],"sourceRoot":""}
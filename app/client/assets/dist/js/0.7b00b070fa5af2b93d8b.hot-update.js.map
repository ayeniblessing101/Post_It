{"version":3,"sources":["webpack:///./app/client/components/group/AddGroupForm.jsx?80e0"],"names":["AddGroupForm","props","state","groupname","isLoading","images","errors","handleSubmit","bind","handleChange","files","image","cloudName","url","timestamp","Date","now","uploadPreset","paramStr","signature","params","api_key","upload_preset","uploadRequest","post","attach","Object","keys","forEach","key","field","end","error","response","alert","console","log","JSON","stringify","body","uploaded","secure_url","setState","isValid","event","preventDefault","length","createGroup","then","context","router","history","push","target","name","value","form","uploadFile","width","height","Component","propTypes","func","isRequired","contextTypes","object"],"mappings":"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","file":"0.7b00b070fa5af2b93d8b.hot-update.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Dropzone from 'react-dropzone';\nimport sha1 from 'sha1';\nimport superagent from 'superagent';\n// import axios from 'axios';\nimport TextFieldGroup from '../common/TextFieldGroup';\nimport { createGroup } from '../../actions/groupActions';\nimport { validateInput } from '../../validations/addgroup';\n\n/**\n * @class AddGroupForm\n * @extends {React.Component}\n */\nexport class AddGroupForm extends React.Component {\n  /**\n   * Creates an instance of AddGroupForm.\n   * @param {any} props\n   * @memberof AddGroupForm\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      groupname: '',\n      isLoading: false,\n      images: '',\n      errors: {}\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handles file upload\n   */\n  uploadFile(files) {\n    const image = files[0];\n\n    const cloudName = 'blessing';\n    const url = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;\n\n    const timestamp = Date.now() / 1000;\n    const uploadPreset = 'emdtrl4u';\n\n    const paramStr = `timestamp=${timestamp}&upload_preset=${uploadPreset}AGDtyzVzJmEF3xmXDcJXnATYk2Q`;\n    const signature = sha1(paramStr);\n\n    const params = {\n      api_key: '692272296223292',\n      timestamp,\n      upload_preset: uploadPreset,\n      signature\n    };\n\n    const uploadRequest = superagent.post(url);\n    uploadRequest.attach('file', image);\n\n    Object.keys(params).forEach((key) => {\n      uploadRequest.field(key, params[key]);\n    });\n\n    uploadRequest.end((error, response) => {\n      if (error) {\n        alert(error);\n      }\n      console.log(`UPLOAD COMPLETE: ${JSON.stringify(response.body)}`);\n      const uploaded = response.body.secure_url;\n\n      // const updatedImages = Object.assign([], this.state.images);\n      // updatedImages.push(uploaded);\n      this.setState({\n        image: uploaded\n      });\n    });\n  }\n\n  isValid() {\n    const { errors, isValid } = validateInput(this.state);\n\n    if (!isValid) {\n      this.setState({ errors });\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Handle on Submit event\n   * @param {any} event\n   * @memberof AddGroupForm\n   * @return {void}\n   */\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(this.state);\n    if (this.isValid() && this.state.images.length !== 0) {\n      this.setState({ errors: {}, isLoading: true });\n      this.props.createGroup(this.state).then(\n        () => {\n          this.context.router.history.push('/groups');\n        },\n        this.setState({\n          groupname: '',\n          errors: {}\n        })\n      );\n    }\n  }\n\n  /**\n   * @param {any} event\n   * @memberof AddGroupForm\n   * @return {void}\n   */\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  /**\n   * Render AddGroup Form component\n   * @returns {object} Add group form component\n   * @memberof AddGroupForm\n   */\n  render() {\n    const { errors, groupname } = this.state;\n    return (\n      <div>\n        <div className=\"col s12 m10 l10 col-md-10\">\n          <div className=\"mycontainer\">\n            <div className=\"row\">\n              <div className=\"col s12 m4 l2\" />\n              <div className=\"col s12 m4 l8 large-cards\">\n                <h4>Add Group</h4>\n                <form onSubmit={this.handleSubmit}>\n                  { errors.form &&\n                    <div\n                      className=\"alert alert-danger\">\n                      {errors.form}\n                    </div>\n                  }\n                  <div className=\"\">\n                    <TextFieldGroup\n                      className=\"addGroupFormContainer\"\n                      error={errors.groupname}\n                      label=\"Group Name\"\n                      onChange={this.handleChange}\n                      value={groupname}\n                      field=\"groupname\"\n                      type=\"text\"\n                    />\n                    <Dropzone\n                      onDrop={this.uploadFile.bind(this)} >\n                      <img src={this.state.images} alt=\"groupAvatar\" style={{ width: '50px', height: '50px' }} />\n                    </Dropzone>\n                    <div className=\"input-field col s12\">\n                      <button\n                        className=\"btn waves-effect waves-light\"\n                        type=\"submit\">\n                        Create\n                      </button>\n                      <br /><br />\n                    </div>\n                  </div>\n                  <br /><br />\n                </form>\n              </div>\n              <div className=\"col s12 m4 l2\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nAddGroupForm.propTypes = {\n  createGroup: PropTypes.func.isRequired,\n};\n\nAddGroupForm.contextTypes = {\n  router: PropTypes.object.isRequired\n};\n\nexport default connect(null, { createGroup })(AddGroupForm);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/group/AddGroupForm.jsx"],"sourceRoot":""}
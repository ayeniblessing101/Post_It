{"version":3,"sources":["webpack:///./app/client/components/group/AddGroupForm.jsx?80e0"],"names":["AddGroupForm","props","state","groupname","errors","handleSubmit","bind","handleChange","isValid","setState","event","preventDefault","isLoading","createGroup","then","context","router","history","push","files","console","log","image","cloudName","url","timestamp","Date","now","uploadPreset","paramStr","signature","params","api_key","upload_preset","uploadRequest","post","attach","Object","keys","forEach","key","field","end","error","response","alert","JSON","stringify","body","uploaded","images","assign","target","name","value","form","uploadFile","Component","propTypes","func","isRequired","contextTypes","object"],"mappings":"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","file":"0.a97fe482913115cd2659.hot-update.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Dropzone from 'react-dropzone';\nimport sha1 from 'sha1';\nimport axios from 'axios';\nimport TextFieldGroup from '../common/TextFieldGroup';\nimport { createGroup } from '../../actions/groupActions';\nimport { validateInput } from '../../validations/addgroup';\n\n/**\n * @class AddGroupForm\n * @extends {React.Component}\n */\nexport class AddGroupForm extends React.Component {\n  /**\n   * Creates an instance of AddGroupForm.\n   * @param {any} props\n   * @memberof AddGroupForm\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      groupname: '',\n      errors: {}\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  isValid() {\n    const { errors, isValid } = validateInput(this.state);\n\n    if (!isValid) {\n      this.setState({ errors });\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Handle on Submit event\n   * @param {any} event\n   * @memberof AddGroupForm\n   * @return {void}\n   */\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.isValid()) {\n      this.setState({ errors: {}, isLoading: true });\n      this.props.createGroup(this.state).then(\n        () => {\n          this.context.router.history.push('/groups');\n        },\n        this.setState({\n          groupname: '',\n          errors: {}\n        })\n      );\n    }\n  }\n  /**\n   * Handles file upload\n   */\n  uploadFile(files) {\n    console.log('uploadFile: ');\n    const image = files[0];\n\n    const cloudName = 'blessing';\n    const url = `https://api.cloudinary.com/v1_1/${cloudName}/image`;\n\n    const timestamp = Date.now() / 1000;\n    const uploadPreset = 'emdtrl4u';\n\n    const paramStr = `timestamp=${timestamp}&upload_preset=${uploadPreset}AGDtyzVzJmEF3xmXDcJXnATYk2Q`;\n    const signature = sha1(paramStr);\n\n    const params = {\n      api_key: '692272296223292',\n      timestamp,\n      upload_preset: uploadPreset,\n      signature\n    };\n\n    const uploadRequest = axios.post(url);\n    uploadRequest.attach('file', image);\n\n    Object.keys(params).forEach((key) => {\n      uploadRequest.field(key, params[key]);\n    });\n\n    uploadRequest.end((error, response) => {\n      if (error) {\n        alert(error);\n      }\n      console.log('UPLOAD COMPLETE: ' + JSON.stringify(response.body));\n      const uploaded = response.body;\n      const images = Object.assign([], this.state.images);\n      images.push(uploaded);\n      this.setState({\n        images\n      });\n    });\n  }\n  /**\n   * @param {any} event\n   * @memberof AddGroupForm\n   * @return {void}\n   */\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  /**\n   * Render AddGroup Form component\n   * @returns {object} Add group form component\n   * @memberof AddGroupForm\n   */\n  render() {\n    const { errors, groupname } = this.state;\n    return (\n      <div>\n        <div className=\"col s12 m10 l10 col-md-10\">\n          <div className=\"mycontainer\">\n            <div className=\"row\">\n              <div className=\"col s12 m4 l2\" />\n              <div className=\"col s12 m4 l8 large-cards\">\n                <h4>Add Group</h4>\n                <form onSubmit={this.handleSubmit}>\n                  { errors.form &&\n                    <div\n                      className=\"alert alert-danger\">\n                      {errors.form}\n                    </div>\n                  }\n                  <div className=\"\">\n                    <TextFieldGroup\n                      className=\"addGroupFormContainer\"\n                      error={errors.groupname}\n                      label=\"Group Name\"\n                      onChange={this.handleChange}\n                      value={groupname}\n                      field=\"groupname\"\n                      type=\"text\"\n                    />\n                    <Dropzone onDrop={this.uploadFile.bind(this)} />\n                    <div className=\"input-field col s12\">\n                      <button\n                        className=\"btn waves-effect waves-light\"\n                        type=\"submit\">\n                        Create\n                      </button>\n                      <br /><br />\n                    </div>\n                  </div>\n                  <br /><br />\n                </form>\n              </div>\n              <div className=\"col s12 m4 l2\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nAddGroupForm.propTypes = {\n  createGroup: PropTypes.func.isRequired,\n};\n\nAddGroupForm.contextTypes = {\n  router: PropTypes.object.isRequired\n};\n\nexport default connect(null, { createGroup })(AddGroupForm);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/group/AddGroupForm.jsx"],"sourceRoot":""}
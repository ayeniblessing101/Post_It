{"version":3,"sources":["webpack:///./app/client/components/messages/MessageBoard.jsx?8fe6","webpack:///./app/client/components/messages/MessageForm.jsx?c5ed"],"names":["MessageBoard","props","state","groups","nextProps","setState","selectedGroupId","addUserToGroup","console","log","Component","propTypes","func","isRequired","object","number","MessageForm","messages","group","groupId","message","priority","handleSubmit","bind","handleChange","event","target","name","value","preventDefault","message_body","priority_level","postMessage","then","getMessages","$","document","ready","material_select","grouId","groudId","allMessages","parseInt","groupTitle","map","currentGroup","id","groupName","length","User","username","createdAt","ISO_8601","fromNow","handleMessageStatus","toLowerCase","array","mapStateToProps","allGroups"],"mappings":"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","file":"0.a2093d34bda324e5d91e.hot-update.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport AddUserModal from './AddUserModal';\nimport MessageForm from './MessageForm';\nimport AllGroups from './AllGroups';\nimport AllUsers from './AllUsers';\n\n/**\n * @class MessageBoard\n * @extends {React.Component}\n */\nclass MessageBoard extends React.Component {\n  /**\n   * Creates an instance of MessageBoard.\n   * @param {any} props\n   * @memberof MessageBoard\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      groups: this.props.groups,\n    };\n  }\n\n  /**\n   * @param {any} nextProps\n   * @memberof MessageBoard\n   * @return {void}\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      groups: nextProps.groups\n    });\n  }\n\n  render() {\n    const selectedGroupId = this.props.selectedGroupId;\n    const { addUserToGroup } = this.props;\n    console.log(this.props.groups, '========')        \n    \n    return (\n      <div>\n        <div className=\"col s12 m12 l12 col-md-10\">\n          <div id=\"messageBoard\" className=\"mycontainer\">\n            {<AddUserModal\n              addUserToGroup={addUserToGroup}\n              groupId={selectedGroupId}\n              /* statusMessage={statusMessage} */\n              />}\n            <div className=\"row\">\n              <AllGroups\n                groups={this.props.groups}\n              />\n              <MessageForm\n                groupId={selectedGroupId}\n              />\n              <AllUsers groupId={selectedGroupId} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMessageBoard.propTypes = {\n  addUserToGroup: PropTypes.func.isRequired,\n  groups: PropTypes.object.isRequired,\n  selectedGroupId: PropTypes.number.isRequired\n};\n\n\nexport default connect(null)(MessageBoard);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/messages/MessageBoard.jsx","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { getMessages, postMessage }\nfrom '../../actions/messageAction';\n\n/**\n * @class MessageForm\n * @extends {React.Component}\n */\nclass MessageForm extends React.Component {\n  /**\n   * Creates an instance of MessageForm.\n   * @param {any} props\n   * @memberof MessageForm\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: this.props.messages,\n      group: this.props.group,\n      groupId: this.props.groupId,\n      message: '',\n      priority: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * @param {any} event\n   * @memberof MessageForm\n   * @returns {void}\n   */\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  /**\n   * @param {any} event\n   * @memberof MessageForm\n   * @return {void}\n   */\n  handleSubmit(event) {\n    event.preventDefault();\n    const message = {\n      message_body: this.state.message,\n      priority_level: this.state.priority\n    };\n    this.props.postMessage(this.state.groupId, message)\n    .then(() => {\n      this.setState({\n        message: '',\n        priority: ''\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.props.getMessages(this.props.groupId);\n    $(document).ready(() => {\n      $('select').material_select();\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      messages: nextProps.messages,\n      group: nextProps.group,\n      grouId: nextProps.groudId\n    });\n  }\n  render() {\n    let allMessages;\n    const { group } = this.state;\n    const { messages } = this.state;\n    const groupId = parseInt(this.props.groupId, 10);\n    let groupTitle = 'No Group Found';\n\n    group.map((currentGroup) => {\n      const { id, groupName } = currentGroup;\n      if (id === groupId) {\n        groupTitle = groupName;\n      }\n    });\n\n    if (messages.length > 0) {\n      allMessages = messages.map(message => (\n        <div key={message.id}>\n          <b className=\"senderName\">\n            {message.User.username}\n          </b>\n          <span className=\"right\">\n            { moment(message.createdAt, moment.ISO_8601).fromNow() }\n          </span>\n          <p key={message.id}>\n            <Link\n              id={message.id}\n              className=\"messageLink\"\n              to=\"#\"\n              onClick={this.handleMessageStatus}>\n              {message.message_body}\n            </Link>\n            <span\n            className={`new badge ${(message.priority_level).toLowerCase()}`}\n            data-badge-caption={message.priority_level} />\n          </p>\n          <hr /><br />\n        </div>));\n    } else {\n      allMessages = (\n        <h6>No messages to show</h6>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"col s12 m12 l6 message-cards\">\n          <div className=\"message-cards-board\">\n            <h5 className=\"groupName\">{groupTitle}</h5>\n            { allMessages }\n          </div>\n          <div className=\"message-cards-form\">\n            <form onSubmit={this.handleSubmit} method=\"post\">\n              <div className=\"input-field col s8\">\n                <textarea\n                  placeholder=\"Write your message Here\"\n                  id=\"message\"\n                  type=\"text\"\n                  required\n                  name=\"message\"\n                  onChange={this.handleChange}\n                  value={this.state.message}\n                  className=\"materialize-textarea\"\n                />\n              </div>\n              <div className=\"col s4 mySelect\">\n                <select\n                  className=\"browser-default\"\n                  required\n                  value={this.state.priority}\n                  name=\"priority\"\n                  onChange={this.handleChange}>\n                  <option value=\"\" disabled>Select Priority</option>\n                  <option value=\"Normal\">Normal</option>\n                  <option value=\"Critical\">Critical</option>\n                  <option value=\"Urgent\">Urgent</option>\n                </select>\n                <br />\n                <button className=\"btn messageBtn\" type=\"submit\">\n                  <i className=\"material-icons\">send</i>\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMessageForm.propTypes = {\n  postMessage: PropTypes.func.isRequired,\n  getMessages: PropTypes.func.isRequired,\n  groupId: PropTypes.number.isRequired,\n  messages: PropTypes.array.isRequired\n};\n\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n  group: state.groups.allGroups\n});\n\nexport default\nconnect(mapStateToProps,\n  { getMessages, postMessage })(MessageForm);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/messages/MessageForm.jsx"],"sourceRoot":""}
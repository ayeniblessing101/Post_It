{"version":3,"sources":["webpack:///./app/client/components/messages/AllGroups.jsx?0a0a"],"names":["AllGroups","props","usersPerPage","state","groups","offset","pageCount","Math","ceil","count","handlePageClick","bind","fetchGroups","nextProps","setState","messages","page","selected","fetchGroupUsers","searchParams","map","group","id","groupName","Component","propTypes","array","isRequired","func","mapStateToProps"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;;;AAGA;;;;IAIMA,S;;;AACJ;;;;;AAKA,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,sHACXA,KADW;;AAEjB,UAAKC,YAAL,GAAoB,CAApB;AACA,UAAKC,KAAL,GAAa;AACXC,cAAQ,MAAKH,KAAL,CAAWG,MAAX,CAAkBA,MADf;AAEXC,cAAQ,CAFG;AAGXC,iBAAWC,KAAKC,IAAL,CAAU,MAAKP,KAAL,CAAWG,MAAX,CAAkBK,KAAlB,GAA0B,MAAKP,YAAzC;AAHA,KAAb;AAKA,UAAKQ,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,OAAvB;AARiB;AASlB;;AAED;;;;;;;;;wCAKoB;AAClB,WAAKV,KAAL,CAAWW,WAAX;AACD;;AAED;;;;;;;;8CAK0BC,S,EAAW;AACnC,WAAKC,QAAL,CAAc;AACZV,gBAAQS,UAAUT,MAAV,CAAiBA,MADb;AAEZW,kBAAUF,UAAUE;AAFR,OAAd;AAID;AACD;;;;;;;;;oCAMgBC,I,EAAM;AAAA;;AACpB,UAAMC,WAAWD,KAAKC,QAAtB;AACA,UAAMZ,SAASE,KAAKC,IAAL,CAAUS,WAAW,KAAKf,YAA1B,CAAf;;AAEA,WAAKY,QAAL,CAAc,EAAET,cAAF,EAAd,EAA0B,YAAM;AAC9B,eAAKJ,KAAL,CAAWiB,eAAX,CAA2B,OAAKC,YAAhC,EAA8Cd,MAA9C;AACD,OAFD;AAGD;AACD;;;;;;;;;6BAMS;AACP,UAAMD,SAAS,KAAKD,KAAL,CAAWC,MAA1B;AACA,aACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAK,WAAU,iBAAf;AACE;AAAA;AAAA;AACE,yBAAU,4BADZ;AAEE,kCAAiB;AAFnB;AAKIA,mBAAOgB,GAAP,CAAW;AAAA,qBACT;AAAA;AAAA,kBAAI,KAAKC,MAAMC,EAAf;AACE;AAAA;AAAA,oBAAK,WAAU,oBAAf;AACE;AAAA;AAAA,sBAAG,WAAU,gBAAb;AAAA;AAAA,mBADF;AAEE;AAAA;AAAA,sBAAM,gBAAcD,MAAMC,EAA1B,EAAgC,WAAU,YAA1C;AACGD,0BAAME;AADT;AAFF;AADF,eADS;AAAA,aAAX;AALJ;AADF;AADF,OADF;AAsBD;;;;EAjFqB,gBAAMC,S;;AAoF9BxB,UAAUyB,SAAV,GAAsB;AACpBrB,UAAQ,oBAAUsB,KAAV,CAAgBC,UADJ;AAEpBf,eAAa,oBAAUgB,IAAV,CAAeD;AAFR,CAAtB;;AAKA,IAAME,kBAAkB,SAAlBA,eAAkB;AAAA,SAAU;AAChCzB,YAAQD,MAAMC,MADkB;AAEhCW,cAAUZ,MAAMY;AAFgB,GAAV;AAAA,CAAxB;;kBAKe,yBAAQc,eAAR,EAAyB,EAAEjB,sCAAF,EAAzB,EAA0CZ,SAA1C,C","file":"0.a43a076e3b029c53d126.hot-update.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchGroups } from '../../actions/groupActions';\n\n\n/**\n * @class AllGroups\n * @extends {React.Component}\n */\nclass AllGroups extends React.Component {\n  /**\n   * Creates an instance of AllGroups.\n   * @param {any} props\n   * @memberof AllGroups\n   */\n  constructor(props) {\n    super(props);\n    this.usersPerPage = 5;\n    this.state = {\n      groups: this.props.groups.groups,\n      offset: 0,\n      pageCount: Math.ceil(this.props.groups.count / this.usersPerPage)\n    };\n    this.handlePageClick = this.handlePageClick.bind(this);\n  }\n\n  /**\n   * @memberof AllGroups\n   *\n   * @return {void}\n   */\n  componentDidMount() {\n    this.props.fetchGroups();\n  }\n\n  /**\n   * @param {any} nextProps\n   * @memberof AllGroups\n   * @return {void}\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      groups: nextProps.groups.groups,\n      messages: nextProps.messages\n    });\n  }\n  /**\n   * used to calculate offset\n   * @param {number} page\n   * @memberof UserList\n   * @return {page} - page\n   */\n  handlePageClick(page) {\n    const selected = page.selected;\n    const offset = Math.ceil(selected * this.usersPerPage);\n\n    this.setState({ offset }, () => {\n      this.props.fetchGroupUsers(this.searchParams, offset);\n    });\n  }\n  /**\n   * Renders the AllGroup Component\n   * @memberof AllGroups\n   *\n   * @returns {object} - AllGroups Component\n   */\n  render() {\n    const groups = this.state.groups;\n    return (\n      <div>\n        <div className=\"col s12 m12 l3 \">\n          <ul\n            className=\"collapsible allMessageCard\"\n            data-collapsible=\"accordion\"\n          >\n            {\n              groups.map(group =>\n                <li key={group.id}>\n                  <div className=\"collapsible-header\">\n                    <i className=\"material-icons\">filter_drama</i>\n                    <Link to={`/group/${group.id}`} className=\"groupNames\">\n                      {group.groupName}\n                    </Link>\n                  </div>\n                </li>\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nAllGroups.propTypes = {\n  groups: PropTypes.array.isRequired,\n  fetchGroups: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  groups: state.groups,\n  messages: state.messages\n});\n\nexport default connect(mapStateToProps, { fetchGroups })(AllGroups);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/messages/AllGroups.jsx"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/client/actions/groupActions.js?06ef"],"names":["createGroup","getGroups","getGroupUsers","addUserStatus","fetchGroups","fetchGroupUsers","addUserToGroup","group","post","groups","type","groupUsers","status","message","offset","limit","get","params","then","response","console","log","data","dispatch","catch","error","groupId","members","user"],"mappings":";;;;;;;;;;;QAUgBA,W,GAAAA,W;QAYAC,S,GAAAA,S;QAaAC,a,GAAAA,a;QAcAC,a,GAAAA,a;QAeAC,W,GAAAA,W;QAwBAC,e,GAAAA,e;QAiBAC,c,GAAAA,c;;AAzGhB;;;;AACA;;;;AAEA;;;;;;;AAOO,SAASN,WAAT,CAAqBO,KAArB,EAA4B;AACjC,SAAO;AAAA,WACL,gBAAMC,IAAN,CAAW,gBAAX,EAA6BD,KAA7B,CADK;AAAA,GAAP;AAGD;;AAED;;;;;;AAMO,SAASN,SAAT,CAAmBQ,MAAnB,EAA2B;AAChC,SAAO;AACLC,2BADK;AAELD;AAFK,GAAP;AAID;;AAED;;;;;;AAMO,SAASP,aAAT,CAAuBS,UAAvB,EAAmC;AACxC,SAAO;AACLD,gCADK;AAELC;AAFK,GAAP;AAID;;AAED;;;;;;;AAOO,SAASR,aAAT,CAAuBS,MAAvB,EAA+BC,OAA/B,EAAwC;AAC7C,SAAO;AACLH,kCADK;AAELE,kBAFK;AAGLC;AAHK,GAAP;AAKD;;AAED;;;;;;;AAOO,SAAST,WAAT,GAA4C;AAAA,MAAvBU,MAAuB,uEAAd,CAAc;AAAA,MAAXC,KAAW,uEAAH,CAAG;;AACjD,SAAO;AAAA,WACL,gBAAMC,GAAN,CAAU,gBAAV,EAA4B;AAC1BC,cAAQ;AACNH,sBADM;AAENC;AAFM;AADkB,KAA5B,EAMCG,IAND,CAMM,UAACC,QAAD,EAAc;AAClBC,cAAQC,GAAR,CAAY,eAAZ,EAA6BF,QAA7B;AACA,UAAMV,SAASU,SAASG,IAAxB;AACAC,eAAStB,UAAUQ,MAAV,CAAT;AACD,KAVD,EAUGe,KAVH,CAUS,UAACC,KAAD,EAAW;AAClB,YAAOA,KAAP;AACD,KAZD,CADK;AAAA,GAAP;AAeD;;AAED;;;;;;AAMO,SAASpB,eAAT,CAAyBqB,OAAzB,EAAkC;AACvC,SAAO;AAAA,WACL,gBAAMV,GAAN,oBAA2BU,OAA3B,aACCR,IADD,CACM,gBAAc;AAAA,UAAXI,IAAW,QAAXA,IAAW;;AAClBC,eAASrB,cAAcoB,KAAKA,IAAL,CAAUK,OAAxB,CAAT;AACD,KAHD,EAGGH,KAHH,CAGS,UAACC,KAAD,EAAW;AAClB,YAAOA,KAAP;AACD,KALD,CADK;AAAA,GAAP;AAQD;;AAED;;;;;;AAMO,SAASnB,cAAT,CAAwBoB,OAAxB,EAAiCE,IAAjC,EAAuC;AAC5C,SAAO;AAAA,WACP,gBAAMpB,IAAN,oBAA4BkB,OAA5B,YAA4CE,IAA5C,EACGV,IADH,CACQ,UAACI,IAAD,EAAU;AACd,UAAMT,UAAUS,KAAKT,OAArB;AACAU,eAASpB,cAAc,IAAd,EAAoBU,OAApB,CAAT;AACA,aAAO,IAAP;AACD,KALH,EAKKW,KALL,CAKW,UAACC,KAAD,EAAW;AAClB,UAAMZ,UAAUY,MAAMH,IAAN,CAAWT,OAA3B;AACAU,eAASpB,cAAc,KAAd,EAAqBU,OAArB,CAAT;AACA,aAAOA,OAAP;AACD,KATH,CADO;AAAA,GAAP;AAWD,C","file":"0.1fc8fad84e2218ba1ee0.hot-update.js","sourcesContent":["import axios from 'axios';\nimport { GET_GROUPS, ADD_USER_TO_GROUP, GET_GROUP_USERS } from './types';\n\n/**\n * Creates a new Group.\n * @param {Array} group - groups.\n *\n * @returns {createGroup} -\n    returns the createGroup function to perform async dispatch.\n */\nexport function createGroup(group) {\n  return () => (\n    axios.post('/api/v1/group/', group)\n  );\n}\n\n/**\n * Fetch all Groups.\n * @param {Array} groups - groups.\n *\n * @returns {object} action payload data and action type\n */\nexport function getGroups(groups) {\n  return {\n    type: GET_GROUPS,\n    groups\n  };\n}\n\n/**\n * Fetch all Users in a group.\n * @param {Array} groupUsers - groupUsers.\n *\n * @returns {object} action payload data and action type\n */\nexport function getGroupUsers(groupUsers) {\n  return {\n    type: GET_GROUP_USERS,\n    groupUsers\n  };\n}\n\n/**\n * Add user to a group.\n * @param {Boolean} status - status.\n * @param {string} message - message.\n *\n * @returns {object} action payload data and action type\n */\nexport function addUserStatus(status, message) {\n  return {\n    type: ADD_USER_TO_GROUP,\n    status,\n    message\n  };\n}\n\n/**\n * Fetch all Groups.\n *  @param {int} offset - offset\n * @param {int} limit - limit\n *\n * @returns {function} dispatches getGroups action\n */\nexport function fetchGroups(offset = 0, limit = 5) {\n  return dispatch => (\n    axios.get('/api/v1/groups', {\n      params: {\n        offset,\n        limit\n      }\n    })\n    .then((response) => {\n      console.log('resresrersres', response);\n      const groups = response.data;\n      dispatch(getGroups(groups));\n    }).catch((error) => {\n      throw (error);\n    })\n  );\n}\n\n/**\n * Dispatches an action to fetch all users in a group.\n * @param {Integer} groupId - groupdId.\n *\n * @returns {function} - dispatches fetchGroupUsers action.\n */\nexport function fetchGroupUsers(groupId) {\n  return dispatch => (\n    axios.get(`/api/v1/group/${groupId}/users`)\n    .then(({ data }) => {\n      dispatch(getGroupUsers(data.data.members));\n    }).catch((error) => {\n      throw (error);\n    })\n  );\n}\n\n/**\n * Dispatches an action to add a user to a group.\n * @param {integer} groupId - The Id of the group.\n * @param {String} user - The username.\n *@returns {function} - dispatches addUserToGroup action.\n */\nexport function addUserToGroup(groupId, user) {\n  return dispatch =>\n  axios.post(`/api/v1/group/${groupId}/user`, user)\n    .then((data) => {\n      const message = data.message;\n      dispatch(addUserStatus(true, message));\n      return true;\n    }).catch((error) => {\n      const message = error.data.message;\n      dispatch(addUserStatus(false, message));\n      return message;\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/actions/groupActions.js"],"sourceRoot":""}
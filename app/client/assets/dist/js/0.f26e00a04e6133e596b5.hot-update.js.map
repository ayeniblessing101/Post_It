{"version":3,"sources":["webpack:///./app/client/validations/adduser.js?f563","webpack:///./app/client/components/messages/AddUserModal.jsx?1cbc","webpack:///./app/client/components/messages/MessageBoard.jsx?8fe6"],"names":["Validator","require","isEmpty","exports","validateInput","data","errors","username","isValid","AddUserModal","props","state","handleSubmit","bind","handleChange","setState","event","preventDefault","groupId","addUserToGroup","then","res","addFlashMessage","type","text","fetchGroupUsers","target","name","value","form","Component","propTypes","func","isRequired","number","MessageBoard","groups","nextProps","selectedGroupId","array"],"mappings":"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","file":"0.f26e00a04e6133e596b5.hot-update.js","sourcesContent":["const Validator = require('validator');\nconst isEmpty = require('lodash/isEmpty');\n\nexports.validateInput = (data) => {\n  const errors = {};\n  if (Validator.isEmpty(data.username)) {\n    errors.username = 'This field is required';\n  }\n\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/validations/adduser.js","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal } from 'react-materialize';\nimport { connect } from 'react-redux';\nimport TextFieldGroup from '../common/TextFieldGroup';\nimport { validateInput } from '../../validations/adduser';\nimport { addFlashMessage } from '../../actions/flashMessageActions';\nimport { fetchGroupUsers } from '../../actions/groupActions';\nimport FlashMessagesList from '../notification/FlashMessagesList';\n\n/**\n * @class AddUserModal\n * @extends {React.Component}\n */\nclass AddUserModal extends React.Component {\n  /**\n   * Creates an instance of AddUserModal.\n   * @param {any} props\n   * @memberof AddUserModal\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      errors: {}\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Checks if form input(s) is valid\n   * @returns {isValid} - checks if form input is valid\n   * @memberof AddUserModal\n   */\n  isValid() {\n    const { errors, isValid } = validateInput(this.state);\n\n    if (!isValid) {\n      this.setState({ errors });\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Handles submit request\n   * @param {any} event\n   * @memberof AddUserModal\n   * @returns {void}\n   */\n  handleSubmit(event) {\n    event.preventDefault();\n    const groupId = this.props.groupId;\n    if (this.isValid()) {\n      this.setState({ errors: {} });\n      this.props.addUserToGroup(groupId, {\n        username: this.state.username\n      }).then((res) => {\n        if (res === true) {\n          this.props.addFlashMessage({\n            type: 'success',\n            text: 'User has been add to Group Successfully'\n          });\n          this.props.fetchGroupUsers(groupId);\n        } else {\n          this.props.addFlashMessage({\n            type: 'error',\n            text: res\n          });\n        }\n      });\n    }\n    this.setState({\n      username: '',\n      errors: {}\n    });\n  }\n\n  /**\n   * Handles onChange event\n   * @param {any} event\n   * @memberof AddUserModal\n   * @return {void}\n   */\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  /**\n   * @memberof AddUserModal\n   * @returns {object} - AddUserModal Component\n   */\n  render() {\n    const { errors, username } = this.state;\n    return (\n      <div>\n        <Modal\n          header=\"Add User to Group\"\n          trigger={\n            <a\n            className=\"btn-floating add_user btn-small waves-effect waves-light red\">\n              <i className=\"material-icons\">\n                add\n              </i>\n            </a>\n          }>\n          <FlashMessagesList />\n          <form onSubmit={this.handleSubmit} >\n            { errors.form &&\n              <div className=\"alert alert-danger\">{errors.form}</div> }\n            <TextFieldGroup\n              error={errors.username}\n              label=\"Username\"\n              onChange={this.handleChange}\n              value={username}\n              field=\"username\"\n              type=\"text\"\n            />\n            <Button\n              className=\"btn waves-effect waves-light\"\n              type=\"submit\"\n            >\n            Add\n            </Button>\n          </form>\n        </Modal>\n      </div>\n    );\n  }\n\n}\n\nAddUserModal.propTypes = {\n  addUserToGroup: PropTypes.func.isRequired,\n  fetchGroupUsers: PropTypes.func.isRequired,\n  addFlashMessage: PropTypes.func.isRequired,\n  groupId: PropTypes.number.isRequired\n};\n\nexport default connect(null,\n  { addFlashMessage, fetchGroupUsers })(AddUserModal);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/messages/AddUserModal.jsx","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport AddUserModal from './AddUserModal';\nimport MessageForm from './MessageForm';\nimport AllGroups from './AllGroups';\nimport AllUsers from './AllUsers';\n\n/**\n * @class MessageBoard\n * @extends {React.Component}\n */\nclass MessageBoard extends React.Component {\n  /**\n   * Creates an instance of MessageBoard.\n   * @param {any} props\n   * @memberof MessageBoard\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      groups: this.props.groups,\n    };\n  }\n\n  /**\n   * @param {any} nextProps\n   * @memberof MessageBoard\n   * @return {void}\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      groups: nextProps.groups\n    });\n  }\n\n  render() {\n    const groups = this.props.groups;\n    const selectedGroupId = this.props.selectedGroupId;\n    const { addUserToGroup } = this.props;\n    return (\n      <div>\n        <div className=\"col s12 m12 l12 col-md-10\">\n          <div id=\"messageBoard\" className=\"mycontainer\">\n            {<AddUserModal\n              addUserToGroup={addUserToGroup}\n              groupId={selectedGroupId}\n              />}\n            <div className=\"row\">\n              <AllGroups\n                groups={this.props.groups}\n              />\n              <MessageForm\n                groupId={selectedGroupId}\n              />\n              <AllUsers groupId={selectedGroupId} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMessageBoard.propTypes = {\n  addUserToGroup: PropTypes.func.isRequired,\n  groups: PropTypes.array.isRequired,\n  selectedGroupId: PropTypes.number.isRequired\n};\n\n\nexport default connect(null)(MessageBoard);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/messages/MessageBoard.jsx"],"sourceRoot":""}
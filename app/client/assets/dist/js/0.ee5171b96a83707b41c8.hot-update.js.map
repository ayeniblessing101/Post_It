{"version":3,"sources":["webpack:///./app/client/components/user/SignupForm.jsx?3869"],"names":["SignupForm","props","state","username","email","phoneNo","password","confirm_password","errors","isLoading","invalid","handleChange","bind","handleSubmit","event","setState","target","name","value","isValid","preventDefault","userSignupRequest","then","addFlashMessage","type","text","context","router","history","push","data","checkUserExits","phone","toggleForm","Component","propTypes","func","isRequired","contextTypes","object"],"mappings":"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","file":"0.ee5171b96a83707b41c8.hot-update.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TextFieldGroup from '../common/TextFieldGroup';\nimport validateInput from '../../validations/signup';\nimport {\n  userSignupRequest\n} from '../../actions/authenticationActions';\nimport { addFlashMessage } from '../../actions/flashMessageActions';\n\n/**\n * @class SignupForm\n * @extends {React.Component}\n */\nclass SignupForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      phoneNo: '',\n      password: '',\n      confirm_password: '',\n      errors: {},\n      isLoading: false,\n      invalid: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  /**\n   * Handle onChange event\n   * @param {any} event\n   * @memberof SignupForm\n   * @return {void}\n   */\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  /**\n   * Checks if the form input(s) is valid\n   * @memberof SignupForm\n   * @return {isValid} - checks if the fields are not empty\n   */\n  isValid() {\n    const { errors, isValid } = validateInput(this.state);\n\n    if (!isValid) {\n      this.setState({ errors });\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Handles submit event\n   * @param {any} event\n   * @memberof SignupForm\n   * @return {void}\n   */\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (this.isValid()) {\n      this.setState({ errors: {}, isLoading: true });\n      this.props.userSignupRequest(this.state).then(\n        () => {\n          this.props.addFlashMessage({\n            type: 'success',\n            text: 'You signed up successfully. Login!'\n          });\n          this.context.router.history.push('/groups');\n        },\n        ({ data }) => this.setState({\n          errors: data,\n          isLoading: false,\n          password: '',\n          confirm_password: '',\n        })\n      );\n    }\n  }\n  /**\n   * renders the signup form component\n   * @returns {object} - signup component\n   * @memberof SignupForm\n   */\n  render() {\n    const { errors } = this.state;\n    return (\n      <div>\n        <h4>Register to PostIt</h4>\n        <form className=\"col s12\" onSubmit={this.handleSubmit}>\n          <div className=\"\">\n            <TextFieldGroup\n              error={errors.username}\n              label=\"Username\"\n              onChange={this.handleChange}\n              checkUserExits={this.checkUserExits}\n              value={this.state.username}\n              field=\"username\"\n              type=\"text\"\n            />\n            <TextFieldGroup\n              error={errors.email}\n              label=\"Email\"\n              onChange={this.handleChange}\n              checkUserExits={this.checkUserExits}\n              value={this.state.email}\n              field=\"email\"\n              type=\"text\"\n            />\n            <TextFieldGroup\n              error={errors.phone}\n              label=\"Phone Number\"\n              onChange={this.handleChange}\n              value={this.state.phoneNo}\n              field=\"phoneNo\"\n              type=\"number\"\n            />\n            <TextFieldGroup\n              error={errors.password}\n              label=\"Password\"\n              onChange={this.handleChange}\n              value={this.state.password}\n              field=\"password\"\n              type=\"password\"\n            />\n            <TextFieldGroup\n              error={errors.confirm_password}\n              label=\"Confirm Password\"\n              onChange={this.handleChange}\n              value={this.state.confirm_password}\n              field=\"confirm_password\"\n              type=\"password\"\n            />\n            <div className=\"input-field col s12\">\n              <button\n                disabled={this.state.isLoading || this.state.invalid}\n                className=\"btn waves-effect waves-light\" type=\"submit\"\n                name=\"action\">Submit\n                <i className=\"material-icons right\">send</i>\n              </button>\n              <br /><br />\n            </div>\n          </div>\n        </form>\n        <p>Have an account already?\n          <button\n            className=\"blue-text signUp\"\n            onClick={() => this.props.toggleForm('login')}\n          >\n            <b>Login</b></button>\n        </p>\n      </div>\n    );\n  }\n}\n\nSignupForm.propTypes = {\n  userSignupRequest: PropTypes.func.isRequired,\n  addFlashMessage: PropTypes.func.isRequired,\n  toggleForm: PropTypes.func.isRequired\n};\n\nSignupForm.contextTypes = {\n  router: PropTypes.object.isRequired\n};\n\nexport default connect(null,\n  { userSignupRequest, addFlashMessage })(SignupForm);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/user/SignupForm.jsx"],"sourceRoot":""}
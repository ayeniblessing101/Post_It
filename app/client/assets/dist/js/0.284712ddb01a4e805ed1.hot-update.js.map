{"version":3,"sources":["webpack:///./app/client/components/messages/AddUserModal.jsx?1cbc"],"names":["AddUserModal","props","state","username","errors","handleSubmit","bind","handleChange","isValid","setState","event","preventDefault","groupId","addUserToGroup","then","res","addFlashMessage","type","text","fetchGroupUsers","target","name","value","form","Component","propTypes","func","isRequired","number"],"mappings":"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","file":"0.284712ddb01a4e805ed1.hot-update.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal } from 'react-materialize';\nimport { connect } from 'react-redux';\nimport TextFieldGroup from '../common/TextFieldGroup';\nimport { validateInput } from '../../validations/adduser';\nimport { addFlashMessage } from '../../actions/flashMessageActions';\nimport { fetchGroupUsers } from '../../actions/groupActions';\nimport FlashMessagesList from '../notification/FlashMessagesList';\n\n/**\n * @class AddUserModal\n * @extends {React.Component}\n */\nclass AddUserModal extends React.Component {\n  /**\n   * Creates an instance of AddUserModal.\n   * @param {any} props\n   * @memberof AddUserModal\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      errors: {}\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Checks if form input(s) is valid\n   * @returns {isValid} - checks if form input is valid\n   * @memberof AddUserModal\n   */\n  isValid() {\n    const { errors, isValid } = validateInput(this.state);\n\n    if (!isValid) {\n      this.setState({ errors });\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Handles submit request\n   * @param {any} event\n   * @memberof AddUserModal\n   * @returns {void}\n   */\n  handleSubmit(event) {\n    event.preventDefault();\n    const groupId = this.props.groupId;\n    if (this.isValid()) {\n      this.setState({ errors: {} });\n      this.props.addUserToGroup(groupId, {\n        username: this.state.username\n      }).then((res) => {\n        if (res === true) {\n          this.props.addFlashMessage({\n            type: 'success',\n            text: 'User has been add to Group Successfully'\n          });\n          this.props.fetchGroupUsers(groupId);\n        } else {\n          this.props.addFlashMessage({\n            type: 'error',\n            text: res\n          });\n        }\n      });\n    }\n    this.setState({\n      username: '',\n      errors: {}\n    });\n  }\n\n  /**\n   * Handles onChange event\n   * @param {any} event\n   * @memberof AddUserModal\n   * @return {void}\n   */\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  /**\n   * @memberof AddUserModal\n   * @returns {object} - AddUserModal Component\n   */\n  render() {\n    const { errors, username } = this.state;\n    return (\n      <div>\n        <Modal\n          header=\"Add User to Group\"\n          trigger={\n            <a\n            className=\"btn-floating add_user btn-small waves-effect waves-light red\">\n              <i className=\"material-icons\">\n                add\n              </i>\n            </a>\n          }>\n          <FlashMessagesList />\n          <form onSubmit={this.handleSubmit} >\n            { errors.form &&\n              <div className=\"alert alert-danger\">{errors.form}</div> }\n            <TextFieldGroup\n              error={errors.username}\n              label=\"Username\"\n              onChange={this.handleChange}\n              value={username}\n              field=\"username\"\n              type=\"text\"\n            />\n            <Button\n              className=\"btn waves-effect waves-light\"\n              type=\"submit\"\n            >\n            Add\n            </Button>\n          </form>\n        </Modal>\n      </div>\n    );\n  }\n\n}\n\nAddUserModal.propTypes = {\n  addUserToGroup: PropTypes.func.isRequired,\n  fetchGroupUsers: PropTypes.func.isRequired,\n  addFlashMessage: PropTypes.func.isRequired,\n  groupId: PropTypes.number.isRequired\n};\n\nexport default connect(null,\n  { addFlashMessage, fetchGroupUsers })(AddUserModal);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/messages/AddUserModal.jsx"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/client/components/messages/MessageForm.jsx?c5ed"],"names":["MessageForm","props","state","messages","group","groupId","message","priority","handleSubmit","bind","handleChange","event","setState","target","name","value","preventDefault","message_body","priority_level","postMessage","then","console","log","getGroupWithMessages","$","document","ready","material_select","nextProps","allMessages","length","map","id","members","username","createdAt","ISO_8601","fromNow","handleMessageStatus","toLowerCase","groupName","Component","propTypes","func","isRequired","number","array","mapStateToProps","groups","allGroups"],"mappings":"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","file":"0.4e930514a8c20a889e1c.hot-update.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { getGroupWithMessages, postMessage }\nfrom '../../actions/messageAction';\n\n/**\n * @class MessageForm\n * @extends {React.Component}\n */\nclass MessageForm extends React.Component {\n  /**\n   * Creates an instance of MessageForm.\n   * @param {any} props\n   * @memberof MessageForm\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: this.props.messages,\n      group: this.props.group,\n      groupId: this.props.groupId,\n      message: '',\n      priority: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * @param {any} event\n   * @memberof MessageForm\n   * @returns {void}\n   */\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  /**\n   * @param {any} event\n   * @memberof MessageForm\n   * @return {void}\n   */\n  handleSubmit(event) {\n    event.preventDefault();\n    const message = {\n      message_body: this.state.message,\n      priority_level: this.state.priority\n    };\n    this.props.postMessage(this.state.groupId, message)\n    .then(() => {\n      this.setState({\n        message: '',\n        priority: ''\n      });\n    });\n  }\n\n  componentDidMount() {\n    console.log(this.state);\n    this.props.getGroupWithMessages(this.props.groupId);\n    $(document).ready(() => {\n      $('select').material_select();\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      messages: nextProps.messages,\n      group: nextProps.group,\n      groupId: nextProps.groupId\n    });\n  }\n  render() {\n    let allMessages;\n    // const { group } = this.state;\n    const { messages } = this.state;\n    // const groupId = parseInt(this.props.groupId, 10);\n    // let groupTitle = 'No Group Found';\n\n    // group.map((currentGroup) => {\n    //   const { id, groupName } = currentGroup;\n    //   if (id === groupId) {\n    //     groupTitle = groupName;\n    //   }\n    // });\n\n    if (messages.length > 0) {\n      allMessages = messages && messages.map(message => (\n        <div key={message.id}>\n          <b className=\"senderName\">\n            {message.members.username}\n          </b>\n          <span className=\"right\">\n            { moment(message.createdAt, moment.ISO_8601).fromNow() }\n          </span>\n          <p key={message.id}>\n            <Link\n              id={message.id}\n              className=\"messageLink\"\n              to=\"#\"\n              onClick={this.handleMessageStatus}>\n              {message.message_body}\n            </Link>\n            <span\n            className={`new badge ${(message.priority_level).toLowerCase()}`}\n            data-badge-caption={message.priority_level} />\n          </p>\n          <hr /><br />\n        </div>));\n    } else {\n      allMessages = (\n        <h6>No messages to show</h6>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"col s12 m12 l6 message-cards\">\n          <div className=\"message-cards-board\">\n            <h5 className=\"groupName\">{messages.groupName}</h5>\n            { allMessages }\n          </div>\n          <div className=\"message-cards-form\">\n            <form onSubmit={this.handleSubmit} method=\"post\">\n              <div className=\"input-field col s8\">\n                <textarea\n                  placeholder=\"Write your message Here\"\n                  id=\"message\"\n                  type=\"text\"\n                  required\n                  name=\"message\"\n                  onChange={this.handleChange}\n                  value={this.state.message}\n                  className=\"materialize-textarea\"\n                />\n              </div>\n              <div className=\"col s4 mySelect\">\n                <select\n                  className=\"browser-default\"\n                  required\n                  value={this.state.priority}\n                  name=\"priority\"\n                  onChange={this.handleChange}>\n                  <option value=\"\" disabled>Select Priority</option>\n                  <option value=\"Normal\">Normal</option>\n                  <option value=\"Critical\">Critical</option>\n                  <option value=\"Urgent\">Urgent</option>\n                </select>\n                <br />\n                <button className=\"btn messageBtn\" type=\"submit\">\n                  <i className=\"material-icons\">send</i>\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMessageForm.propTypes = {\n  postMessage: PropTypes.func.isRequired,\n  getGroupWithMessages: PropTypes.func.isRequired,\n  groupId: PropTypes.number.isRequired,\n  messages: PropTypes.array.isRequired\n};\n\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n  group: state.groups.allGroups\n});\n\nexport default\nconnect(mapStateToProps,\n  { getGroupWithMessages, postMessage })(MessageForm);\n\n\n\n// WEBPACK FOOTER //\n// ./app/client/components/messages/MessageForm.jsx"],"sourceRoot":""}